import numpy as np
from PIL import Image
import math

def F(x):
    # F(x) = |255 e^{-x/1000} |x| e^{x/1000}|
    return abs(255 * math.exp(-x/1000) * abs(x) * math.exp(x/1000))

# Define auxiliary functions H0, H1, H2, U, K, etc. based on formulas from the image
# Note: fill in each function with the exact formula provided in the image captions.
def H0(x, y):
    # Example placeholder; replace with actual H0 formula
    # H0(x,y) = C_u(x,y) + 1/4 L_{200,15}(x,y)((8+u^2-v)K(x,y) + (3-(v-1)^2)(1-K(x,y)))(1-U(x,y))+U(x,y)
    return 0

def H1(x, y):
    # actual H1 from formulas
    return 0

def H2(x, y):
    # actual H2 from formulas
    return 0

# ... Define all other required functions: U(x,y), K(x,y), R_{u,s}(x,y), B_{s}(x,y), etc.
# Each function must directly translate the mathematical expression.

def compute_pixel(m, n, width, height):
    # Convert row m, column n to x, y coordinates used in formulas
    x = m - width/2
    y = n - height/2

    # Compute the three color channels via the nested functions
    r = F(H0(m*1000/600 - 611*n/600, 611*m/600 - n*1000/600))
    g = F(H1(m*1000/600 - 611*n/600, 611*m/600 - n*1000/600))
    b = F(H2(m*1000/600 - 611*n/600, 611*m/600 - n*1000/600))

    # Clamp channels to [0,255]
    return [int(np.clip(r, 0, 255)), int(np.clip(g, 0, 255)), int(np.clip(b, 0, 255))]


def generate_image(width=2000, height=1200):
    img = Image.new('RGB', (width, height))
    pixels = img.load()

    for m in range(width):
        for n in range(height):
            pixels[m, n] = tuple(compute_pixel(m+1, n+1, width, height))

    return img


def compare_images(generated, reference_path, tolerance=1e-3):
    ref = Image.open(reference_path).convert('RGB')
    gen_arr = np.array(generated, dtype=float)
    ref_arr = np.array(ref, dtype=float)

    # Compute mean squared error
    mse = np.mean((gen_arr - ref_arr)**2)
    print(f"MSE: {mse}")
    if mse < tolerance:
        print("Images match within tolerance: the formulas produce the reference image.")
    else:
        print("Significant difference: likely the reference image is not generated by these formulas.")


if __name__ == '__main__':
    # Generate image from formulas
    img = generate_image()
    img.save('generated.png')

    # Compare to the supplied image file
    import sys
    if len(sys.argv) > 1:
        reference_path = sys.argv[1]
    else:
        reference_path = 'reference.png'

    compare_images(img, reference_path)
